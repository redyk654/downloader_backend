version: '3.8'

services:
  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prom_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=15d'
    networks:
      - monitoring_net
      - vidown_default  # Accès au réseau de l'app principale
    restart: unless-stopped

  # Node exporter pour métriques système
  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    networks:
      - monitoring_net
    restart: unless-stopped

  # cAdvisor pour métriques Docker
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring_net
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring_net
    depends_on:
      - prometheus
    restart: unless-stopped

  # Uptime Kuma
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime_kuma
    ports:
      - "3001:3001"
    volumes:
      - uptime_kuma_data:/app/data
    networks:
      - monitoring_net
    restart: unless-stopped

  # Umami Analytics
  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    container_name: umami
    ports:
      - "3002:3000"
    environment:
      - DATABASE_URL=postgresql://umami:umami@umami_db:5432/umami
    networks:
      - monitoring_net
    depends_on:
      - umami_db
    restart: unless-stopped

  umami_db:
    image: postgres:15
    container_name: umami_db
    environment:
      - POSTGRES_DB=umami
      - POSTGRES_USER=umami
      - POSTGRES_PASSWORD=umami
    volumes:
      - umami_db_data:/var/lib/postgresql/data
    networks:
      - monitoring_net
    restart: unless-stopped

volumes:
  prom_data:
  grafana_data:
  uptime_kuma_data:
  umami_db_data:

networks:
  monitoring_net:
    driver: bridge
  # Référence au réseau externe de votre application principale
  vidown_default:
    external: true